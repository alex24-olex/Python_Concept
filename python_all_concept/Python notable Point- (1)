1=========================================================
Assert function is used for debugging process.it usually check for correctness of code.if a statement is true then nothing but if false then Assertion error is rised.
2=========================================================
Yield:this keyword is used like return statement but it is used for returning generator.

3===============================================================
In python we can implemented a matrix as nested list(list inside a list).Each element treated as row of the matrix.for example m=[[1,2],[4,5],[3,6]] represents a matrix of 3 rows and 2 column
http://www.geeksforgeeks.org/transpose-matrix-single-line-python/
4=====================================================
By default python print() function ends with newline.But if you do wana to end with new line then pass a argument like this.
--print("pytohn",end='')
5======================================================
splitstring="this string has been\nsplit over\nservel\nlines"
so the output will be like
this string has been 
split over servel 
lines
6=======================================================
print(""" this is the
string is splited
over in
this account""")
this is will give o/p like
----this is the
string is splited
over in
this account

7===========================================================
a=12
b=3
print(a/b) o/p--4.0 divide in python by default return a result of float
print(a//b)o/p--4 if you want integer then do this
print(a%b) o/p--0 its a module

8============================================================
parrot= "Norwegian blue"
print(parrot)
print(parrot[0])//it will print 1st word
print(parrot[3])//it will print 3rd word(0,1,2)
print(parrot[-1])//it will print the whole string from last to  first
print(parrot[0:6])//it will print from first to 6 word'
print(parrot[:6])//it will print from first to 6 word
print(parrot[6:])//it will print from 6th word til last word
print(parrot[-4:-2])//o/p will be.. bl
print(parrot[0:6:2])[start:end:step]o/p{Nre}
print(parrot[0:6:3])[start:end:step]o/p{Nw}
9============================================================
alphabet = "abcdefghijklmnopqrstuvwxyz"
 
print(alphabet[1::4])
The slice starts at position 1, so that's b - remember that index positions are numbered from zero.

The second part of the slice, the stop value, isn't specified - so the slice runs right through to the end of the string.

The third value, 4, is the step size. So this slice is taking every fourth character.

4 characters on from b is f, then 4 on again is j, and so on.
10=======================================================
today="friday"
print("day" in today)o/p--True
print("fri" in today)o/p--True
print("tatt" in today)o/p--False

11========================================================
python does not have itself boolean data type., other language like java does have boolean data type.

python does have two constants true and false
Well in python true is one and false is zero.But in a condition 
any non zero or non empty values will evaluate to true.
{
ex---
x="false"
if x:
     print("x is true")
o/p x is true.(beacuse we have actually got the x set to a  string vlaue, which in this case is a string so in this case )
}
print(bool(''))o/p(Empty value)False
print(bool('A string'))o/p(Non empty)True
12--------------------------------------------------------------
x = input("please enter somne text")
if x:
     print("you have entered {}".format(x))#here {} this taking the value of x dynamically
else:
     print("you did enter any thing")
    
13----------------------------------------------------------------
name=input("what is your name")
age=int(input("what is your age {0}".format(name))) this will ask to user ehat is your age rahul __.
basically this is all about {0}.format(name) samjo isse
14-----------------------------------------------------------------
print(number[i]) it print the character at the position i.
where number is a string.

15-------------------------------------------------------------------------
https://pyformat.info/ for {} <==== this format. this link is given.

16---------------------------------------------------------------------------
So actually  continue stops processing any more lines in the block and forces the for loop to move on to the next value in the sequence.
17----------------------------------------------------------------
[-1] is gonna give you last number
[-:1] is gonna give you( ip="12.23.456.45.45" o/p=>ip="12.23.456.45.4")
[-::1] is gonna give you reverse of the string.

18====================================================================
ip=input("please enter an ip")
print(ip.count("."))
It will count all the "." in a line
19=================================================================
If a method acts on an object and changes it or mutates it. then method is gonna to return none but the actual variable object has benn updated.
ex--
even=[2,4,6,8]
odd=[1,3,5,7]

numbers=even+odd
print(numbers.sort) it will print out none
beacuse number.sort is not gonna make a new object its actually gonna update in the existing object.
numbers.sort()
print(numbers) it will sort the numbers 
print(sorted(numbers)) it wi sort the number and it will return a new object
20================================================================
string="1234567890"
myiterator=iter(string)
print(my_iterator)
o/p--<str_iterator object at 0x7f8f69d6f550>
now that is object representation of object
So a for loop always makes normal object a iteratoble object and see for a error that terminae for loop automatically.
21================================================================
print("=" * 40) it will print "=" fourty times.
22================================================================
print(range(0,5,2)==range(0,6,2))
print(list(range(0,5,2)))
print(list(range(0,6,2)))
o/p===True
[0, 2, 4]
[0, 2, 4]
the last element will not ptint.
23=================================================================
tupple are immutable (can not be changed)
ex of immutablity.
list=['4','3','2']
list1=list.append("4")
print(list)o/p--['4', '3', '2', '4']
tup=('5','6','7')
tup.append('w')
print(tup)
o/p--
Traceback (most recent call last):
  File "/home/rahulrajput/IdeaProjects/python_udemy/if_else.py", line 12, in <module>
    tup.append('w')
AttributeError: 'tuple' object has no attribute 'append'


Note--Tupple start with small bracket.;

Creating a tuple is as simple as putting different comma-separated values. Optionally you can put these comma-separated values between parentheses also. For example −
tup1 = ('physics', 'chemistry', 1997, 2000);
tup2 = (1, 2, 3, 4, 5 );
tup3 = "a", "b", "c", "d";
To write a tuple containing a single value you have to include a comma, even though there is only one value 
tup1 = (50,);

tupples means that you can not change the contents of an object
once you have created it but that does'nt mean that your variable can't be assigned a new object of that type, so that a important clarification

a = b = c = d = 12 
print(c) o/p==12
print(b) o/p==12

tupple are immutable but somehow it consist list then list itself is changable.

ex-----------
tupp= 'tim','55','america',([(1,'impetious'),(2,'battle symphony'),(3,'no toge')])
#print(tupp)
#print(type(tupp))
#<class 'tuple'>

#print(tupp[0])
#55
#print(tupp[1])
#tim
#print(tupp[2])
#america
#print(tupp[3])
#[(1, 'impetious'), (2, 'battle symphony'), (3, 'no toge')]
#tupp[3].append((4,'new entry'))
#print(tupp)
#print(type(tupp[3]))# appended inside the third element in the list and inside the whole tupplke
#unpacking the tupple
name,age,country,track=tupp
#print(type(track))
#<class 'list'>
#print (name)
#tim
#print (age)
#55
#print (country)
#america
#print (track)
#[(1, 'impetious'), (2, 'battle symphony'), (3, 'no toge')]

#here track is the list so we can append item in it(it is mutable.)
#track.append((7,'castle of song'))
#print(track)
#so ultimately this tupple is changing in behaviour.
#for further extracting the value inside the track
#for song in track:
    #print(type(song))
    #<class 'tuple'>
   # print(song)
#(1, 'impetious')
#(2, 'battle symphony')
#(3, 'no toge')
#unpacking the song tupple
#    track_no,song_name=song
#    print("track_no {} ,song_name {}".format(track_no,song_name))


24==================================================================
Dictionary are unordered and set of key value pairs.

The method get() returns a value for the given key. If key is not available then returns default value None.
dict.get(key, default=None) now this python 3 method 
in python 2 we used to write has_key() method.now this method is deprecated in poython 3.

ex--
if fruit is a dictionary then 
we can get the (key,value pair) keys by fruit.keys() function.
25==================================================================
(1)for writing in a file you have two method file.writelines() it will write all lines and file.write will write a single line
(2)second method is print(list_value,file=file_name) so in this method it will print list_value in file line by line.
cities=['kanpur','lucknow','haridwar','rishikesh','rath','hamirpur','UP']

with open("/home/rahulrajput/Desktop/file1.txt",'w') as f_write:
    #f_write.writelines(cities)# to write line in asingle line
    for city in cities:
        print(city,file=f_write)
26===========================================================================================
you can write strip function with print function
print("adequite".strip("a")
o/p-dequie

27==============================================
A classical example of tupple
imelda="more mayhem","imelda may","2011",(
    (1,"pulling the rug"),(2,"psycho"),(3,"mayhem"),(4,"kentshin town waltz"))
x,y,z,w=imelda
print(type(x))
print(type(y))
print(type(z))
print(type(w))
x1,y1,z1,w1=w
print(type(x1))
print(type(y1))
print(type(z1))
print(type(w1))
print(x1)
x2,y2=x1
print(type(x2))
print(type(y2))
o/p---
<class 'str'>
<class 'str'>
<class 'str'>
<class 'tuple'>
<class 'tuple'>
<class 'tuple'>
<class 'tuple'>
<class 'tuple'>
(1, 'pulling the rug')
<class 'int'>
<class 'str'>

28==========================================

readlines will return a list
readline will return a string
29============================================
python does have a eval function that evalutes any expression.
30=============================================
Using pickle to write binary files
------------------------------------
python provides a mechanism for serializing objects called pickling.
serialization a process that allows  object to be saved in file.

import pickle
imelda=('more mayhem',
        'imelda may',
        '2011',
        ((1,'pulling a red'),
         (2,'psycho'),
         (3,'mayhem'),
         (4,'navrat')
         ))
with open("imelda.pickle",'w') as pickle_file_write:
    pickle.dump(imelda,pickle_file_write)
if you write in file with 'w' mode then it will take in str form but 
    pickle.dumps(obj, protocol=None, *, fix_imports=True)
Return the pickled representation of the object as a bytes object,
instead of writing it to a file.
so you have to open the file in 'wb' mode.
31================================================
shelve--
--------
Although pickle module is great for serializing pyhton objects it really does have a drawback that the objects all have to be loaded back into memory into the computer that's
fine for many situation but if you are dealing with a really large set of object for ex a single object  like a dictionary then loading that in entire thing to memory may not be a realistic option so you need to look at alternatives that why we use shelve module.
shelve stored in a file rather than in memory 
  

