##################
# Python Decorator  Durga pdf in page no 160
 ##################
# every thing in python is a object


# Nested function

# def outer():
#     print('outer started')
#     def inner():
#         print('inner started')
    
#     return inner() # calling inner function first way
        
# outer()
#output
# outer started                                                                                                                       
# inner started

######### 2nd way of calling inner function
# def outer():
#     print('outer started')
#     def inner():
#         print('inner started')
    
#     return inner # calling inner function first way
        
# x = outer()
# x()## calling inner function 2nd way
# # output
# outer started                                                                                                                       
# inner started  


############### Decorator  #########

# Inner function will take same number of argument as the function is taking number of argument 
# And by function means the function on which we have apply decorator.

# def decor_add(func):
#     def inner(a,b): # same argbeen passed as it passed in original func
#         print("*"*8)
#         func(a,b)
#         print("*"*8)
#     return inner

# @decor_add
# def add(a,b):
#     print(a+b)
    
# add(13,42)

#output
# ********                                                                                                                            
# 55                                                                                                                                  
# ********
#### calling above function withot decorator

# def decor_add(func):
#     def inner(a,b): # same argbeen passed as it passed in original func
#         print("*"*8)
#         func(a,b)
#         print("*"*8)
#     return inner



# def add(a,b):
#     print(a+b)
    
# x = decor_add(add)
# x(32,23)

# ### output
# ********                                                                                                                            
# 55                                                                                                                                  
# ******** 

#### Decorator Chanining ##############

# def decor1(func):
#     def Inner(name):
#         print("first decorator")
#     return Inner

# def decor2(func):
#     def Inner2(name):
#         print("second decoratoe")
    
#     return Inner2

# @decor1
# @decor2
# def wish(name):
#     print('hello welcome',name)

# wish("durga")
# ## output
# # first decorator

# In decorator chaining the decorator which is define just above the original func is being
# called first (* here decor2 will be called)
# and the output of first decorator will become the input to second decorator and at last farthest decorator 
# from original func will be ecexuted. (@here decor1 will executed later)
# So the output is "first decorator"
    
# def decor1(func):
#     def Inner1():
#         print("calling decor 1 ")
#     return Inner1

# def decor2(func):
#     def Inner2():
#         print("calling decor 2")
#         func()
#     return Inner2
    
    
# @decor2
# @decor1    
# def f():
#     print("original function")
    
# f()
### output
# calling decor 2                                                                                                                     
# calling decor 1
#------------------------- IMP-------------
# So basically in above ex decor 1 will be called first and it will return inner 1 and that will be inpust as a function
# to decor 2 . so line 115 will be print then from line 116 Inner1() will be called bcz it was input.
# so finally output will be calling decor 2 followed by calling decor 1
    
